// import React, { Component, FormEvent, useEffect, useState } from "react";
// import "./App.css";
// import { Button, Form, Container, Header } from 'semantic-ui-react'
// import NavBars from './NavBars'
// import axios from "axios";

// // import Login from "./pages/Login"


// interface ClientData {
//   month: string;
//   client: string,
//   id: number,
//   balance: number,
//   deposit: number,
//   withdrawl: number,
//   gainLoss: number,
//   endingBalance:number
// }

// function App() {
//   const [clientInput, setClientInput] = useState<string>('')
//   const [serverData, setServerData] = useState([])
//   const [clients, setClients] = useState<ClientData>({
//     month: "",
//     client: "",
//     id: 0,
//     balance: 0,
//     deposit: 0,
//     withdrawl: 0,
//     gainLoss: 0,
//     endingBalance:0
//   })

//   useEffect(()=>{
//     let persons:any
//     const testHlder = { "Balance": "200",
//     "Client": "Newtest",
//     "Deposit": "200",
//     "EndingBalance": "200",
//     "GainOrLoss": "0",
//     "ID": "4",
//     "Month": "March",
//     "Withdrawl": "0",
//   }
//     axios.get(`https://sheet.best/api/sheets/619d222f-7a12-41e1-ac03-3a701302e6e1`)
//       .then(res => {
//         persons = res.data;
//         console.log(persons)
//          // setServerData(res.data)
//       })
//     axios.post('https://sheet.best/api/sheets/619d222f-7a12-41e1-ac03-3a701302e6e1',"JSON.stringify(testHlder)")
//     .then((response) => {
//       console.log("Post Response",response.data, "Person Data", persons);
//     }, (error) => {
//       console.log(error);
//     });
//   },[])

//   const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {
//     console.log(e.target.name, e.target.value)
//     setClientInput(e.target.value)
//   };

//   const handleSubmit = (e: FormEvent) => {
//     e.preventDefault();    
//     setClients(prevClient => {
//     return {
//       ...prevClient,
//     }
// })
// }


//   return (
//     <div className="App">
//       {/* <NavBars />
//       <Container fluid className="container">
//         <Header as='h2'>React Google Sheets!</Header>
//         <Form className="form" onSubmit={handleSubmit}>
//           <Form.Field>
//             <label>Name</label>
//             <input placeholder='Enter your name' type="text" name="clientName" value={clients.name} onChange={changeHandler} />
//           </Form.Field>
//           <Form.Field>
//             <label>Age</label>
//             <input placeholder='Enter your age' type="number" name="age" value={clients.age} onChange={changeHandler} />
//           </Form.Field>
//           <Form.Field>
//             <label>Salary</label>
//             <input placeholder='Enter your salary' type="number" name="salary" value={clients.salary} onChange={changeHandler} />
//           </Form.Field>
//           <Form.Field>
//             <label>Hobby</label>
//             <input placeholder='Enter your hobby' type="text" name="hobby" value={clients.hobby} onChange={changeHandler} />
//           </Form.Field>

//           <Button color="blue" type='submit'>Submit</Button>
//         </Form>
//       </Container> */}

//     </div>
//   );
// }

// export default App;


// // `https://sheet.best/api/sheets/619d222f-7a12-41e1-ac03-3a701302e6e1`


    // const data = {
    //     Month: "March",
    //     Client: "Jack Doe",
    //     Id: 2,
    //     StartingBalance:1000,
    //     SureFireFee: 30,
    //     NewNetBalance: 1070,
    //     PercentageGain: .07,
    //     Withdrawal: "0",
    //     Deposit: "0",
    //     NextMonthValue: "$1070",
    //   };


    {/* 
    <Container fluid className="container">
      <Header as="h3">Update Portfolio</Header>
      <Form className="form">
        <Form.Field>
          <label>Starting Portfolio Value</label>
          <input
            placeholder="Starting Value"
            onChange={(e) => setClientName(e.target.value)}
          />
        </Form.Field>
        <Form.Field>
          <label>Ending Monthly Value</label>
          <input
            placeholder="Ending Portfolio Value"
            onChange={(e) => setStartingBalance(e.target.value)}
          />
        </Form.Field>
        <Button color="blue" type="button" onClick={handleSubmitPortfolioValue}>
          Update Portfolio Value
        </Button>
      </Form> 
    </Container> */}

    
    // fetch(
      
    //   {
    //     method: "POST",
    //     mode: "cors",
    //     headers: {
    //       "Content-Type": "application/json",
    //     },
    //     body: JSON.stringify(data),
    //   }
    // )
    //   .then((r) => r.json())
    //   .then((data) => {
    //     // The response comes here
    //     console.log(data);
    //     let clear = document.querySelectorAll("portInput")
    //     console.log(clear.input, "clear.input")
    //     console.log(clear, "full clear = ")
    //     clear.target.value =""
    //   })
    //   .catch((error) => {
    //     // Errors are reported there
    //     console.log(error);
    //   }); 
//Patch data example
       "data": 
        {"NewNetBalance": 100,
        "SureFireFee":30,
        "PercentageGain":0.12,
        "NextMonthValue":100}

          //Harry's Cut without fee
        // if(Number(clients[i].Id)===1){
        //   const hStartingBalance = Number(clients[i].startingBalance)
        //   let harrysCut=(hStartingBalance/startingValue)*totalProfit
        //   let percentGained= harrysCut/hStartingBalance
        //   harrysCut+=hStartingBalance
        //   axios.patch("https://sheetdb.io/api/v1/gukfsbnzqayil/Id/1",{"data":{"NewNetBalance":harrysCut,"PercentageGain":percentGained}}).then( response => {});
        // }
        // //Calculate Surefires Portion
        // if(Number(clients[i].Id)===0){
        //   const StartingBalance = Number(clients[i].startingBalance)
        //   let sureFirePort=(StartingBalance/startingValue)*totalProfit
        //   let percentGained= sureFirePort/StartingBalance
        //   sureFirePort+=StartingBalance
        //   axios.patch("https://sheetdb.io/api/v1/gukfsbnzqayil/Id/0",{"data":{"NewNetBalance":sureFirePort,"PercentageGain":percentGained}}).then( response => {
        //   });
        // }
        onClick={(e)=> {teachDomStuff(e,client.Id)}}>{client.Withdrawal}

         {/* <Container fluid className="container">
        <Header as="h3">Add New Client after Portfolio is balanced</Header>
        <Form className="form">
          <Form.Field required>
            <label>New Client Name</label>
            <input
              required="required"
              type="text"
              placeholder="Client Name"
              onChange={(e) => setClientName(e.target.value)}
            />
          </Form.Field>
          <Form.Field required>
            <label>Starting Balance</label>
            <input
              required="required"
              type="number"
              placeholder="Starting Balance"
              onChange={(e) => setStartingBalance(e.target.value)}
            />
          </Form.Field>
          <Form.Field required>
            <label>Sure Fire Fee</label>
            <Input
              type="number"
              placeholder="Enter as Decimal"
              onChange={(e) => setSureFireFee(e.target.value)}
            />
          </Form.Field>
          <Button color="blue" type="button" onClick={handleSubmitNewClient}>
            Add New Client
          </Button>
        </Form>
      </Container> */}



// const FormExampleRequiredField = () => (
//   <Form>
//     <Form.Field required>
//       <label>Last name</label>
//       <Input placeholder='Full name' />
//     </Form.Field>
//   </Form>
// )

  // const handleSubmitNewClient = (e) => {
  //   e.preventDefault();
  //   // prompt("Are you sure you want to add a new client to Month goes here" )

  //   const forID = Date.now();
  //   let nextMonth;

  //   if (dateHolder.getMonth() === 11) {
  //     nextMonth = "January" + dateHolder.getFullYear();
  //   } else {
  //     nextMonth =
  //       monthNames[dateHolder.getMonth() + 1] + dateHolder.getFullYear();
  //   }

  //   const dataSend = {
  //     Month: nextMonth,
  //     clientName,
  //     startingBalance,
  //     SureFireFee,
  //     Id: forID,
  //     EnrollmentDate: new Date(forID).toDateString(),
  //   };

  //   axios
  //     .post(`https://sheetdb.io/api/v1/gukfsbnzqayil?sheet=${nextMonth}`, {
  //       data: dataSend,
  //     })
  //     .then((data) => {
  //       // The response comes here
  //       // console.log(data,"this is data");
  //       Array.from(document.querySelectorAll("input")).forEach(
  //         (input) => (input.value = "")
  //       );
  //       setStartingBalance("");
  //       setSureFireFee("");
  //       setPortfolioValue("");
  //     })
  //     .catch((error) => {
  //       // Errors are reported there
  //       console.log(error);
  //     });
  // };


     axios.post(
            `https://sheetdb.io/api/v1/gukfsbnzqayil?sheet=${nextMonth}/Id/${clientIDHolder}`,
          {
            data: {
              Withdrawal: withDrawalHolder,
              Deposit: depositHolder,
              TimeStamp: timeStamp,
              startingBalance: finalClientValue,
            },
          }
        // )
        );

          //   {
  //     "condition": {"Id": "1"},
  //     "set": {
  //         "Withdrawal": 33,
  //         "Deposit": 23333,
  //         "TimeStamp": "today",
  //         "NextMonthValue":50000
  //         }
  // }

   console.log(
      "What were sending", withDrawalHolder,"Withdrawal",'deposit',depositHolder,"Client ID",
      clientIDHolder, "Final next month value", finalClientValue)

      console.log("Current Month", currentMonth, "time stamp", timeStamp)
    // Creates Muliple objects to send to an Axios All requst to push to next months values.

    //  `https://sheetdb.io/api/v1/gukfsbnzqayil?sheet=${nextMonth}/Id/${clientIDHolder}`,

    const PrivateRoute = ({ component: Component, ...rest }) = {

   <R
{...rest}
render={props =>
  localStorage.getItem('token') ?
(
<Component {...props} />
):
(
<RD to='/' />
)
  }
[/](file:///)>
   );
  export default PrivateRoute;
   axios.post(
              `https://api.steinhq.com/v1/storages/60514b53f62b6004b3eb6770/${nextMonth}`,
              [
                {
                  Month:nextMonth,
                  EnrollmentDate:enrollmentDate,
                  Id: clientIDHolder,
                  clientName: clientNameHolder,
                  startingBalance: finalClientValue,
                  SureFireFee: fee,
                }
              ]
            );
          });

            // console.log(sortedSheet[0])
          // for (let i=1; i<unSortedSheet.length; i++){
          //   // console.log(Number(sortedSheet[i-1].Id), "  VS  ", Number(unSortedSheet[i].Id))
          //   if(Number(sortedSheet[i-1].Id)<Number(unSortedSheet[i].Id)){
          //      console.log(Number(sortedSheet[i-1].Id), "  VS  ", Number(unSortedSheet[i].Id),"<Pushing to end")
          //     sortedSheet.push(unSortedSheet[i])
          //   }
          //   if(Number(sortedSheet[i-1].Id)>Number(unSortedSheet[i].Id)){
          //          console.log(Number(sortedSheet[i-1].Id), "  VS  ", Number(unSortedSheet[i].Id)," <Pushing to Start")
          //     sortedSheet.unshift(unSortedSheet[i])
          //   }
          // }

          // function BuddysWorld({ client }) {
//   const [
//     withdrawalEditing,
//     newWithdrawal,
//     setNewWithdrawal,
//     withDrawlHandler,
//   ] = useTableInput();
//   const [
//     depositEditing,
//     newDeposit,
//     setNewDeposit,
//     depositHandler,
//   ] = useTableInput();

//   return (
//     <React.Fragment key={client.Id}>
//       <Table.Row className={client.Id}>
//         <Table.Cell>{client.Month}</Table.Cell>
//         <Table.Cell>
//           <h4>{client.clientName}</h4>
//         </Table.Cell>
//         <Table.Cell>$ {Number(client.startingBalance).toFixed(2)} </Table.Cell>
//         <Table.Cell>{client.SureFireFee} </Table.Cell>
//         <Table.Cell>$ {Number(client.NewNetBalance).toFixed(2)} </Table.Cell>
//         <Table.Cell>{client.PercentageGain} </Table.Cell>
//         <Table.Cell>
//           {withdrawalEditing ? (
//             <input
//               className="withdrawalinput"
//               onChange={(e) => setNewWithdrawal(e.target.value)}
//               name={client.Id}
//               value={newWithdrawal}
//               type="number"
//             />
//           ) : (
//             Number(newWithdrawal) + Number(client.Withdrawal) + " "
//           )}
//           <button className="negative ui button" onClick={withDrawlHandler}>
//             {withdrawalEditing ? "Confirm" : "Edit"}
//           </button>
//         </Table.Cell>
//         <Table.Cell>
//           {depositEditing ? (
//             <input
//               className="depositinput"
//               onChange={(e) => setNewDeposit(e.target.value)}
//               value={newDeposit}
//               type="number"
//             />
//           ) : (
//             Number(newDeposit) + Number(client.Deposit) + " "
//           )}
//           <button  className="positive ui button"  onClick={depositHandler}>
//             {depositEditing ? "Confirm" : "Edit"}
//           </button>
//         </Table.Cell>
//         <Table.Cell>
//           ${" "}
//           {Number(client.NewNetBalance).toFixed(2) -
//             Number(newWithdrawal) +
//             Number(newDeposit)}
//         </Table.Cell>
//       </Table.Row>
//     </React.Fragment>
//   );
// }


// function calculateNewValues() {
    //   let totalProfit = Number(endingBalance) - startingValue;
    //   let clients = sheetsData;
    //   let requestArray = [];
    //   let sureFiresCut = 0;
    //   let atALossBalance = Number(endingBalance);

    //   // Use Total Profit to determine if this needs to be a loss calculation or a gain.
    //   //This will basically just take in all clients values and reduce them without surefire fee.
    //   if (totalProfit > 0) {
    //     for (let i = 0; i < clients.length; i++) {
    //       //Calculate regular client
    //       let clientStartingValue = Number(clients[i].startingBalance);

    //       let clientsCut =
    //         (clientStartingValue / startingValue) *
    //         totalProfit *
    //         (1 - Number(clients[i].SureFireFee));
    //       sureFiresCut +=
    //         (clientStartingValue / startingValue) * totalProfit - clientsCut;

    //       let percentGained = clientsCut / clientStartingValue;
    //       clientsCut += clientStartingValue;
    //       requestArray.push(
    //         axios.put(
    //           `https://api.steinhq.com/v1/storages/60514b53f62b6004b3eb6770/${currentMonth}`,
    //           {
    //             condition: { Id: clients[i].Id },
    //             set: {
    //               NewNetBalance: clientsCut,
    //               PercentageGain: percentGained,
    //             },
    //           }
    //         )
    //       );
    //     }
    //     axios.all(requestArray).then(() => {
    //       axios
    //         .get(
    //           `https://api.steinhq.com/v1/storages/60514b53f62b6004b3eb6770/${currentMonth}?search={"Id":"0"}`
    //         )
    //         .then((res) => {
    //           sureFiresCut += Number(res.data[0].NewNetBalance);
    //           axios
    //             .put(
    //               `https://api.steinhq.com/v1/storages/60514b53f62b6004b3eb6770/${currentMonth}`,
    //               {
    //                 condition: { Id: "0" },
    //                 set: {
    //                   NewNetBalance: sureFiresCut,
    //                 },
    //               }
    //             )
    //             .then((need) => {
    //               axios
    //                 .get(
    //                   `https://api.steinhq.com/v1/storages/60514b53f62b6004b3eb6770/${currentMonth}`
    //                 )
    //                 .then((response) => {
    //                   setSheetsData(response.data);
    //                   setIsLoading(false);
    //                 });
    //             });
    //         });
    //     });
    //   } else {
    //     for (let i = 0; i < clients.length; i++) {
    //       // Go through each client
    //       //Calculate regular client
    //       let clientStartingValue = Number(clients[i].startingBalance); // Gets their starting balance for the month
    //       let clientsCut =(clientStartingValue / startingValue) * atALossBalance; // Sees how much of the portfolio they are entitled too
    //       let percentageLoss = (1 - clientsCut/clientStartingValue) * -1; //Calculates the negative value of the loss in %
    //       requestArray.push(
    //         axios.put(
    //           `https://api.steinhq.com/v1/storages/60514b53f62b6004b3eb6770/${currentMonth}`,
    //           {
    //             condition: { Id: clients[i].Id },
    //             set: {
    //               NewNetBalance: clientsCut,
    //               PercentageGain: percentageLoss,
    //             },
    //           }
    //         )
    //       );
    //     }
    //     axios.all(requestArray).then(() => {
    //       axios
    //         .get(
    //           `https://api.steinhq.com/v1/storages/60514b53f62b6004b3eb6770/${currentMonth}`
    //         )
    //         .then((response) => {
    //           setSheetsData(response.data);
    //           setIsLoading(false);
    //         });
    //     });
    //   }
    // }